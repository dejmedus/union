// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Next-Auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime          @default(now())
  role                Role              @default(USER)
  updatedAt           DateTime          @updatedAt
  name                String?
  email               String?           @unique
  emailVerified       DateTime?
  image               String?
  mailingList         Boolean           @default(false)
  notifications       Notification[]
  username            String?
  gender              Genders[]
  age                 Int?
  orientation         Genders?
  relationshipType    RelationshipType?
  relationshipDynamic Dynamic?
  hasChildren         Boolean           @default(false)
  wantsChildren       Boolean           @default(false)
  beenMarried         Boolean           @default(false)
  wantsMarriage       Boolean           @default(false)
  smokes              Boolean           @default(false)
  drinks              Boolean           @default(false)
  pets                Boolean           @default(false)
  values              String[]
  genderPref          String[]
  agePref             Int[]
  partnerKidsPref     Boolean           @default(false)
  intro               String?
  bio                 String?
  matches             Match[]
  accounts            Account[]
  sessions            Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false)
  message   String

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Match {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  dateMatched DateTime   @default(now())
  matchLevel  MatchLevel @default(LEVEL_1)
  badges      String[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

enum RelationshipType {
  CASUAL
  SHORT
  LONG
  LIFE
}

enum MatchLevel {
  LEVEL_1
  LEVEL_2
}

enum Dynamic {
  OPEN
  CLOSED
}

enum Genders {
  S
  H
  T
  O
}

enum Role {
  USER
  ADMIN
}
