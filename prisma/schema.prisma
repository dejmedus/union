// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

// Next-Auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  role          Role          @default(USER)
  updatedAt     DateTime      @updatedAt
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserDetails   UserDetails[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//

model UserDetails {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  userId              String           @db.ObjectId
  notifications       Notification[]
  name                String
  username            String
  gender              Genders
  age                 Int
  orientation         Genders
  relationshipType    RelationshipType
  relationshipDynamic Dynamic
  hasChildren         Boolean
  wantsChildren       Boolean
  beenMarried         Boolean
  wantsMarriage       Boolean
  smokes              Boolean
  drinks              Boolean
  legalDrugs          Boolean
  pets                Boolean
  values              String[]
  image               String?
  genderPref          String[]
  agePref             Int[]
  partnerKidsPref     Boolean
  intro               String
  bio                 String
  matches             Match[]
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  read          Boolean
  message       String
  userDetailsId String      @db.ObjectId
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
}

model Match {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  dateMatched   DateTime    @default(now())
  matchLevel    Int
  badges        String[]
  userDetailsId String      @db.ObjectId
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id])
}

enum RelationshipType {
  CASUAL
  SHORT
  LONG
  LIFE
}

enum Dynamic {
  OPEN
  CLOSED
}

enum Genders {
  S
  H
  T
  O
}

enum Role {
  USER
  ADMIN
}
